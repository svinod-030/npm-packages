"use strict";var l=Object.defineProperty;var r=(t,e,i)=>e in t?l(t,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[e]=i;var s=(t,e,i)=>r(t,typeof e!="symbol"?e+"":e,i);Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const g=class g{constructor(e){s(this,"toggles",{});s(this,"enableLogging",!1);e!=null&&e.enableLogging&&(this.enableLogging=e.enableLogging),this.isNodeEnvironment()?this.loadTogglesFromEnvironment():e!=null&&e.config?this.loadTogglesFromConfig(e.config):e!=null&&e.apiUrl&&this.loadTogglesFromApi(e.apiUrl)}isNodeEnvironment(){return typeof process<"u"&&process.env!==void 0}loadTogglesFromConfig(e){this.toggles={...e}}async loadTogglesFromApi(e){try{const i=await fetch(e);if(!i.ok)throw new Error(`Failed to fetch toggles from API: ${i.statusText}`);const a=await i.json();this.toggles={...a}}catch(i){console.error("Error fetching toggles from API:",i)}}static async init(e){this.instance||(this.instance=new g(e),!this.instance.isNodeEnvironment()&&(e!=null&&e.apiUrl)&&await this.instance.loadTogglesFromApi(e.apiUrl),this.instance.enableLogging&&console.log("FeatureToggleManager initialized with toggles:",this.instance.toggles))}loadTogglesFromEnvironment(){Object.keys(process.env).forEach(e=>{e.startsWith("TOGGLE_")&&(this.toggles[e]=process.env[e].toLowerCase()==="true"||process.env[e].toLowerCase()==="on")}),this.enableLogging&&console.log("Toggles loaded:",this.toggles)}static enabled(e){if(!this.instance)throw new Error("FeatureToggleManager is not initialized. Call init() first.");const i=!!this.instance.toggles[e];return this.instance.enableLogging&&console.log(`Feature "${e}" is ${i?"enabled":"disabled"}`),i}};s(g,"instance");let n=g;const o=n.init.bind(n),c=n.enabled.bind(n);exports.enabled=c;exports.init=o;
